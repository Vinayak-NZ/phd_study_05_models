ylab("Complications during delivery") +
scale_x_continuous(breaks = c(0.25, 0.75), labels = intervention_labels) +
scale_y_continuous(breaks = c(0.25, 0.75), labels = complication_labels) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"),
legend.title = element_blank())
renv::snapshot()
renv::status()
renv::snapshot()
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- xgboost
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
?train
renv::status()
renv::install()
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
# risk-profile
data_complete_cases_risk <- data_complete_cases
data_complete_cases_risk$pre_existing_risk_maternal <-
ifelse(data_complete_cases_risk$pre_existing_risk_maternal == "low", "Low", "High")
data_complete_cases_risk$pre_existing_risk_fetal <-
ifelse(data_complete_cases_risk$pre_existing_risk_fetal == "low", "Low", "High")
group_collapse.labs <- c("Control", "Intervention")
names(group_collapse.labs) <- c("control", "intervention")
ggplot(data_complete_cases_risk, aes(pre_existing_risk_maternal)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels=scales::percent) +
ylab("relative frequencies")
ggplot(data_complete_cases_risk, aes(reorder(pre_existing_risk_maternal, (..count..)/sum(..count..)))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(labels=scales::percent) +
ylab("relative frequencies")
## ---- glm
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_glm.R")
source("R/08_evaluate_glm.R")
source("R/09_visualise_model_glm.R")
source("R/10_output_statistics_model_glm.R")
source("R/10_output_statistics_model_glm.R")
glm_pred_obs_plot
glm_pred_obs_plot <-
ggplot(predicted_df, aes(x=predicted, y= observed)) +
geom_point(aes(colour = pre_existing_risk_maternal, shape = group_collapse)) +
scale_colour_manual(values = c("#46e7fd", "#e18b22")) +
geom_abline(intercept=0, slope=1)
glm_pred_obs_plot
glm_pred_obs_plot <-
ggplot(predicted_df, aes(x=predicted, y= observed)) +
geom_point(aes(colour = pre_existing_risk_maternal, shape = group_collapse)) +
scale_colour_manual(values = c("#46e7fd", "#e18b22")) +
geom_abline(intercept=0, slope=1) +
labs(title = "General linear model representation",
subtitle = "Predicted vs observed values",
caption = "Data source: Obstetric Digital Health Intervention",
shape = "Group assignment",
color = "Risk profile of mother") +
xlab("Predicted values") +
ylab("Observed values") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
glm_pred_obs_plot
predicted_df$predicted
rmse
predictions
# plot-predicted-observed
predicted_df <- data.frame(predicted = predict(final_model, test_key_vars),
observed = test$drg_yield,
gestation_days = test$gestation_days,
pre_existing_risk_maternal = test$pre_existing_risk_maternal,
group_collapse = test$group_collapse)
predicted_df$group_collapse <-
ifelse(predicted_df$group_collapse == 0, "Control", "Intervention")
predicted_df$pre_existing_risk_maternal <-
ifelse(predicted_df$pre_existing_risk_maternal == 0, "Low", "High")
glm_pred_obs_plot <-
ggplot(predicted_df, aes(x=predicted, y= observed)) +
geom_point(aes(colour = pre_existing_risk_maternal, shape = group_collapse)) +
scale_colour_manual(values = c("#46e7fd", "#e18b22")) +
geom_abline(intercept=0, slope=1) +
labs(title = "General linear model representation",
subtitle = "Predicted vs observed values",
caption = "Data source: Obstetric Digital Health Intervention",
shape = "Group assignment",
color = "Risk profile of mother") +
xlab("Predicted values") +
ylab("Observed values") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
predicted_df$predicted
predicted = predict(final_model, test_key_vars, type = "response")
predicted
# plot-predicted-observed
predicted_df <- data.frame(predicted = predict(final_model, test_key_vars, type = "response"),
observed = test$drg_yield,
gestation_days = test$gestation_days,
pre_existing_risk_maternal = test$pre_existing_risk_maternal,
group_collapse = test$group_collapse)
predicted_df$group_collapse <-
ifelse(predicted_df$group_collapse == 0, "Control", "Intervention")
predicted_df$pre_existing_risk_maternal <-
ifelse(predicted_df$pre_existing_risk_maternal == 0, "Low", "High")
glm_pred_obs_plot <-
ggplot(predicted_df, aes(x=predicted, y= observed)) +
geom_point(aes(colour = pre_existing_risk_maternal, shape = group_collapse)) +
scale_colour_manual(values = c("#46e7fd", "#e18b22")) +
geom_abline(intercept=0, slope=1) +
labs(title = "General linear model representation",
subtitle = "Predicted vs observed values",
caption = "Data source: Obstetric Digital Health Intervention",
shape = "Group assignment",
color = "Risk profile of mother") +
xlab("Predicted values") +
ylab("Observed values") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
glm_pred_obs_plot
ggsave("output/glm_pred_obs_plot.png",
plot = glm_pred_obs_plot)
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- bayesian
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
source("R/07_build_bayesian.R")
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- bayesian
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
source("R/08_evaluate_bayesian.R")
source("R/09_visualise_model_bayesian.R")
source("R/10_output_statistics_model_bayesian.R")
bayes_demo_plot <-
ggplot(distribution_compare, aes(x = values, fill = distribution)) +
geom_area(aes(y = after_stat(density)), stat = "bin", alpha = 0.6) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Bayesian model representation",
subtitle = "Posterior and prior distributions",
caption = "Data source: Obstetric Digital Health Intervention",
fill = "Distribution") +
xlab("Estimate of intervention effect") +
ylab("Density") +
annotate("text", x = 50, y = 0.003, label = "\u03b8|X ~ X(-422.60, 199.75)") +
annotate("text", x = 450, y = 0.0005, label = "\u03b8 ~ X(-229.01, 245.81)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
bayes_demo_plot
ggsave("output/bayes_demo_plot.png",
plot = bayes_demo_plot)
bayes_demo_plot <-
ggplot(distribution_compare, aes(x = values, fill = distribution)) +
geom_area(aes(y = after_stat(density)), stat = "bin", alpha = 0.6) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Bayesian model representation",
subtitle = "Posterior and prior distributions",
caption = "Data source: Obstetric Digital Health Intervention",
fill = "Distribution") +
xlab("Estimate of intervention effect") +
ylab("Density") +
annotate("text", x = 50, y = 0.003, label = "\u03b8|X ~ N(-422.60, 199.75)") +
annotate("text", x = 450, y = 0.0005, label = "\u03b8 ~ N(-229.01, 245.81)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggsave("output/bayes_demo_plot.png",
plot = bayes_demo_plot)
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- random-forest
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_random_forest.R")
source("R/08_evaluate_random_forest.R")
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- random-forest
source("R/05_convert_numeric.R")
source("R/06_vars_random_forest_pre_process.R")
source("R/06_split_data.R")
source("R/07_build_random_forest.R")
source("R/08_evaluate_random_forest.R")
source("R/09_visualise_model_random_forest.R")
View(test)
sub_01 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_maternal")]
sub_02 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_fetal")]
sub_03 <- train[, c("drg_yield", "group_collapse", "age_delivery", "time_birth")]
sub_04 <- train[, c("drg_yield", "group_collapse", "gestation_days", "pre_existing_risk_maternal")]
sub_01$Group.Assignment <- as.factor(ifelse(sub_01$group_collapse == 0, "Control", "Intervention"))
sub_01$Delivery.Complications <- as.factor(ifelse(sub_01$complications_delivery == 0, "No", "Yes"))
sub_01$Maternal.Risk.Profile <- as.factor(ifelse(sub_01$pre_existing_risk_maternal == 0, "Low", "High"))
sub_02$Group.Assignment <- as.factor(ifelse(sub_02$group_collapse == 0, "Control", "Intervention"))
sub_02$Delivery.Complications <- as.factor(ifelse(sub_02$complications_delivery == 0, "No", "Yes"))
sub_02$Fetal.Risk.Profile <- as.factor(ifelse(sub_02$pre_existing_risk_fetal == 0, "Low", "High"))
sub_03$Group.Assignment <- as.factor(ifelse(sub_03$group_collapse == 0, "Control", "Intervention"))
sub_03$Age.of.mother <- sub_03$age_delivery
sub_03$Time.of.birth <- as.factor(ifelse(sub_03$time_birth == 0, "Core hours", "After hours"))
sub_04$Group.Assignment <- as.factor(ifelse(sub_04$group_collapse == 0, "Control", "Intervention"))
sub_04$Gestation.Time <- sub_04$gestation_days
sub_04$Maternal.Risk.Profile <- as.factor(ifelse(sub_04$pre_existing_risk_maternal == 0, "Low", "High"))
sub_01 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_maternal")]
sub_02 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_fetal")]
sub_03 <- train[, c("drg_yield", "group_collapse", "age_delivery", "time_birth")]
sub_04 <- train[, c("drg_yield", "group_collapse", "gestation_days", "pre_existing_risk_maternal")]
sub_01$Group.Assignment <- as.factor(ifelse(sub_01$group_collapse == 0, "Control", "Intervention"))
sub_01$Delivery.Complications <- as.factor(ifelse(sub_01$complications_delivery == 0, "No", "Yes"))
sub_01$Maternal.Risk.Profile <- as.factor(ifelse(sub_01$pre_existing_risk_maternal == 0, "Low", "High"))
sub_02$Group.Assignment <- as.factor(ifelse(sub_02$group_collapse == 0, "Control", "Intervention"))
sub_02$Delivery.Complications <- as.factor(ifelse(sub_02$complications_delivery == 0, "No", "Yes"))
sub_02$Fetal.Risk.Profile <- as.factor(ifelse(sub_02$pre_existing_risk_fetal == 0, "Low", "High"))
sub_03$Group.Assignment <- as.factor(ifelse(sub_03$group_collapse == 0, "Control", "Intervention"))
sub_03$Age.of.mother <- sub_03$age_delivery
sub_03$Time.of.birth <- as.factor(ifelse(sub_03$time_birth == 0, "Core hours", "After hours"))
sub_04$Group.Assignment <- as.factor(ifelse(sub_04$group_collapse == 0, "Control", "Intervention"))
sub_04$Gestation.Time <- sub_04$gestation_days
sub_04$Maternal.Risk.Profile <- as.factor(ifelse(sub_04$pre_existing_risk_maternal == 0, "Low", "High"))
sub_01 <- sub_01[, c("drg_yield", "Group.Assignment", "Delivery.Complications", "Maternal.Risk.Profile")]
sub_02 <- sub_02[, c("drg_yield", "Group.Assignment", "Delivery.Complications", "Fetal.Risk.Profile")]
sub_03 <- sub_03[, c("drg_yield", "Group.Assignment", "Age.of.mother", "Time.of.birth")]
sub_04 <- sub_04[, c("drg_yield", "Group.Assignment", "Gestation.Time", "Maternal.Risk.Profile")]
tree_01 <- rpart(drg_yield ~ ., data = sub_01)
tree_02 <- rpart(drg_yield ~ ., data = sub_02)
tree_03 <- rpart(drg_yield ~ ., data = sub_03)
tree_04 <- rpart(drg_yield ~ ., data = sub_04)
png(file="output/random_forest_demo_plot.png")
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.2, 0.2, "Random forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
dev.off()
?png
png(file="output/random_forest_demo_plot.png", width = 1000, heigh = 1000)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.2, 0.2, "Random forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
dev.off()
?mfrow
??mfrow
dev.off()
dev.off()
par(mfrow = c(2, 1))
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
par(mfrow = c(1, 2))
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
dev.off()
par(mfrow = c(1, 2))
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
png(file="output/random_forest_demo_plot_01.png", width = 1000, heigh = 1000)
par(mfrow = c(1, 2))
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
dev.off()
png(file="output/random_forest_demo_plot_01.png", width = 1000, heigh = 1000)
par(mfrow = c(1, 2))
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
dev.off()
png(file="output/random_forest_demo_plot_01.png", width = 1000, heigh = 1000)
par(mfrow = c(1, 2))
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
dev.off()
png(file="output/random_forest_demo_plot_02.png", width = 1000, heigh = 1000)
par(mfrow = c(1, 2))
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
dev.off()
rpart.plot(tree_01, type=5, main = "Tree 1")
png(file="output/random_forest_demo_plot_01.png", width = 1000, heigh = 1000)
par(mfrow = c(1, 2))
rpart.plot(tree_01, type=5, main = "Tree 1")
rpart.plot(tree_02, type=5, main = "Tree 2")
dev.off()
png(file="output/random_forest_demo_plot_02.png", width = 1000, heigh = 1000)
par(mfrow = c(1, 2))
rpart.plot(tree_03, type=5, main = "Tree 3")
rpart.plot(tree_04, type=5, main = "Tree 4")
dev.off()
png(file="output/random_forest_demo_plot_01.png", width = 500, heigh = 500)
par(mfrow = c(1, 2))
rpart.plot(tree_01, type=5, main = "Tree 1")
rpart.plot(tree_02, type=5, main = "Tree 2")
dev.off()
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- xgboost
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/07_build_xgboost.R")
source("R/09_visualise_model_xgboost.R")
source("R/09_visualise_model_xgboost.R")
plot_tree_01
plot_tree_02
plot_tree_03
plot_tree_04
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- glm
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_glm.R")
source("R/08_evaluate_glm.R")
source("R/09_visualise_model_glm.R")
source("R/10_output_statistics_model_glm.R")
nice_table(output_glm_data_frame)
glm_table <- nice_table(output_glm_data_frame)
print(glm_table, preview = "docx")
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- bayesian
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
source("R/08_evaluate_bayesian.R")
source("R/09_visualise_model_bayesian.R")
source("R/10_output_statistics_model_bayesian.R")
bayesian_table <- nice_table(output_bayes_data_frame)
print(bayesian_table, preview = "docx")
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- random-forest
source("R/05_convert_numeric.R")
source("R/06_vars_random_forest_pre_process.R")
source("R/06_split_data.R")
source("R/07_build_random_forest.R")
source("R/08_evaluate_random_forest.R")
source("R/09_visualise_model_random_forest.R")
source("R/10_output_statistics_model_random_forest.R")
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- xgboost
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
train_key_vars <- train[,
c("drg_yield",
"group_collapse",
"age_delivery",
"gestation_days",
"time_birth",
"first_birth",
"multiple_birth",
"missed_due_date",
"complications_delivery",
"complications_maternal",
"complications_fetal",
"pre_existing_risk_fetal",
"pre_existing_risk_maternal")]
# default parameters
xgb_params_default <- list(
objective = "reg:squarederror",
max_depth = 6,
eta = 0.3
)
xgb_model_default <- xgboost(data = as.matrix(train_key_vars[, -1]),
label = train_key_vars$drg_yield,
params = xgb_params_default,
nrounds = 100)
xgb_params_tuned <- list(
objective = "reg:squarederror",
max_depth = 6,
eta = 0.1,
gamma = 0.2,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.6
)
xgb_model <- xgboost(data = as.matrix(train_key_vars[, -1]),
label = train_key_vars[, 1],
nrounds = 300,
params = xgb_params_tuned)
source("R/08_evaluate_xgboost.R")
source("R/09_visualise_model_xgboost.R")
source("R/10_output_statistics_model_xgboost.R")
# fine tune parameters
param_grid <- expand.grid(
max_depth = c(3, 6, 9),
eta = c(0.01, 0.1, 0.3),
gamma = c(0, 0.1, 0.2),
subsample = c(0.6, 0.8, 1),
colsample_bytree = c(0.6, 0.8, 1),
nrounds = c(100, 200, 300),
min_child_weight = c(1, 3, 5)
)
source("R/10_output_statistics_model_xgboost.R")
xgb_model_test <- train(x = data.matrix(subset(train_key_vars,
select = -drg_yield)),
y = train_key_vars$drg_yield,
method = "xgbTree",
metric = "RMSE",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = param_grid)
pdp.lstat <- partial(xgb_model_test, pred.var = "group_collapse", plot = TRUE, rug = TRUE)
pdp.lstat <- iml::partial(xgb_model_test, pred.var = "group_collapse", plot = TRUE, rug = TRUE)
iml::Partial
pdp.lstat <- iml::Partial(xgb_model_test, pred.var = "group_collapse", plot = TRUE, rug = TRUE)
pdp_plot_model <- Predictor$new(xgb_model_test, data = train_key_vars)
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- bayesian
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
source("R/08_evaluate_bayesian.R")
source("R/09_visualise_model_bayesian.R")
source("R/10_output_statistics_model_bayesian.R")
output_bayes_data_frame
summary_bayes
?summary
renv::snapshot()
