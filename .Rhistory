as.factor(ifelse(sub_tree_01$Group.assignment == 0,
"Control",
"Intervention"))
sub_tree_01$Risks.maternal <-
as.factor(ifelse(sub_tree_01$Risks.maternal == 0,
"Low",
"High"))
sub_tree_02$Group.assignment <-
as.factor(ifelse(sub_tree_02$Group.assignment == 0,
"Control",
"Intervention"))
sub_tree_02$Time.of.birth <-
as.factor(ifelse(sub_tree_02$Time.of.birth == 0,
"Core hours",
"After hours"))
sub_tree_03$Group.assignment <-
as.factor(ifelse(sub_tree_03$Group.assignment == 0,
"Control",
"Intervention"))
sub_tree_04$Group.assignment <-
as.factor(ifelse(sub_tree_04$Group.assignment == 0,
"Control",
"Intervention"))
sub_tree_01 <- sub_tree_01[, c("Group.assignment",
"Gestation.days",
"Risks.maternal",
"Cost.of.care")]
sub_tree_02 <- sub_tree_02[, c("Group.assignment",
"Time.of.birth",
"Cost.of.care")]
sub_tree_03 <- sub_tree_03[, c("Group.assignment",
"Age.of.mother",
"Cost.of.care")]
sub_tree_04 <- sub_tree_04[, c("Group.assignment",
"Cost.of.care")]
# create-decision-trees
sub_tree_fit_01 <- rpart(Cost.of.care ~
Group.assignment +
Gestation.days +
Risks.maternal,
data = sub_tree_01)
sub_tree_fit_02 <- rpart(Cost.of.care ~
Group.assignment +
Time.of.birth,
data = sub_tree_02)
sub_tree_fit_03 <- rpart(Cost.of.care ~
Group.assignment +
Age.of.mother,
data = sub_tree_03)
sub_tree_fit_04 <- rpart(Cost.of.care ~
Group.assignment,
data = sub_tree_04)
# reformat-decision-tree-objects
sub_tree_party_01 <- as.party(sub_tree_fit_01)
sub_tree_party_02 <- as.party(sub_tree_fit_02)
sub_tree_party_03 <- as.party(sub_tree_fit_03)
sub_tree_party_04 <- as.party(sub_tree_fit_04)
# output-trees
plot_tree_01 <-
ggparty(sub_tree_party_01) +
geom_edge() +
geom_edge_label() +
geom_node_label(aes(label = splitvar), ids = "inner") +
geom_node_plot(gglist =
list(geom_histogram(aes(x = !!fit_party$terms[[2]])),
scale_fill_manual("#46e7fd"),
xlab("Cost of care"),
scale_x_continuous(breaks = 1000),
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.ticks.x=element_blank())))
plot_tree_02 <-
ggparty(sub_tree_party_02) +
geom_edge() +
geom_edge_label() +
geom_node_label(aes(label = splitvar), ids = "inner") +
geom_node_plot(gglist =
list(geom_histogram(aes(x = !!fit_party$terms[[2]])),
xlab("Cost of care"),
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())))
plot_tree_03 <-
ggparty(sub_tree_party_03) +
geom_edge() +
geom_edge_label() +
geom_node_label(aes(label = splitvar), ids = "inner") +
geom_node_plot(gglist =
list(geom_histogram(aes(x = !!fit_party$terms[[2]])),
xlab("Cost of care"),
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())))
plot_tree_04 <-
ggparty(sub_tree_party_04) +
geom_edge() +
geom_edge_label() +
geom_node_label(aes(label = splitvar), ids = "inner") +
geom_node_plot(gglist =
list(geom_histogram(aes(x = !!fit_party$terms[[2]])),
xlab("Cost of care"),
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())))
grid.arrange(
plot_tree_01,
plot_tree_02,
plot_tree_03,
plot_tree_04,
ncol = 2,
nrow = 2)
grid.arrange(
plot_tree_01,
plot_tree_02,
ncol = 2,
nrow = 1)
plot_tree_01
# output-trees
plot_tree_01 <-
ggparty(sub_tree_party_01) +
geom_edge() +
geom_edge_label() +
geom_node_label(aes(label = splitvar), ids = "inner") +
geom_node_plot(gglist =
list(geom_histogram(aes(x = !!fit_party$terms[[2]])),
scale_fill_manual("#46e7fd"),
xlab("Cost of care"),
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.ticks.x=element_blank())))
plot_tree_01
plot_tree_04 <-
ggparty(sub_tree_party_04) +
geom_edge() +
geom_edge_label() +
geom_node_label(aes(label = splitvar), ids = "inner") +
geom_node_plot(gglist =
list(geom_histogram(aes(x = !!fit_party$terms[[2]])),
xlab("\u20AC"),
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())))
plot_tree_04
plot_tree_01
plot_tree_02
plot_tree_03
plot_tree_04
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- glm
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_glm.R")
source("R/08_evaluate_glm.R")
summary(final_model)
histogram(raw_data_phase_two$drg_yield)
final_model <- glm(drg_yield ~ group_collapse +
gestation_days +
pre_existing_risk_maternal,
data = train_key_vars,
family = Gamma(link = "log"))
final_model_summary <- summary(final_model)
final_model_summary
# Obtain coefficient estimates
coefficients <- coef(final_model)
# Back-transform the coefficients using exp()
back_transformed_coefficients <- exp(coefficients)
# View the back-transformed coefficients
back_transformed_coefficients
predictions <- predict(final_model, newdata = test_key_vars, type="response")
# Calculate RMSE
rmse <- sqrt(mean((test_key_vars$drg_yield - predictions)^2))
rmse
# final_model
final_model <- lm(drg_yield ~ group_collapse +
gestation_days +
pre_existing_risk_maternal,
data = train_key_vars)
# make predictions to test set
predictions <- predict(final_model, newdata = test_key_vars)
# Calculate RMSE
rmse <- sqrt(mean((test_key_vars$drg_yield - predictions)^2))
rmse
final_model <- glm(drg_yield ~ group_collapse +
gestation_days +
pre_existing_risk_maternal,
data = train_key_vars,
family = Gamma(link = "log"))
predictions <- predict(final_model, newdata = test_key_vars, type="response")
predictions
train_key_vars <- train[,
c("group_collapse",
"age_delivery",
"gestation_days",
"time_birth",
"first_birth",
"multiple_birth",
"missed_due_date",
"complications_delivery",
"complications_maternal",
"complications_fetal",
"pre_existing_risk_fetal",
"pre_existing_risk_maternal",
"drg_yield")]
# model-all
model_all <- glm(drg_yield ~ .,
data = train_key_vars,
family = Gamma(link = "log"))
model_all_summary <- summary(model_all)
model_all_summary
model_coefficients <- as.data.frame(model_all_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
max_p_value
# remove first variable
model_1 <- update(model_all, . ~ . - pre_existing_risk_fetal)
model_1_summary <- summary(model_1)
model_1_summary
model_coefficients <- as.data.frame(model_1_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
max_p_value
# remove second variable
model_2 <- update(model_1, . ~ . - multiple_birth)
model_2_summary <- summary(model_2)
model_coefficients <- as.data.frame(model_2_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
max_p_value
model_2_summary
# remove third variable
model_3 <- update(model_2, . ~ . - complications_fetal)
model_3_summary <- summary(model_3)
model_coefficients <- as.data.frame(model_3_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
max_p_value
# remove fourth variable
model_4 <- update(model_3, . ~ . - missed_due_date)
model_4_summary <- summary(model_4)
model_coefficients <- as.data.frame(model_4_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
model_4_summary
max_p_value
# remove fifth variable
model_5 <- update(model_4, . ~ . - age_delivery)
model_5_summary <- summary(model_5)
model_coefficients <- as.data.frame(model_5_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
model_5_summary
max_p_value
# remove sixth variable
model_6 <- update(model_5, . ~ . - first_birth)
model_6_summary <- summary(model_6)
model_coefficients <- as.data.frame(model_6_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
max_p_value
# remove seventh variable
model_7 <- update(model_6, . ~ . - complications_delivery)
model_7_summary <- summary(model_7)
model_coefficients <- as.data.frame(model_7_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
model_7_summary
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
max_p_value
# remove eigth variable
model_8 <- update(model_7, . ~ . - time_birth)
model_8_summary <- summary(model_8)
model_coefficients <- as.data.frame(model_8_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
model_8_summary
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
final_model <- glm(drg_yield ~ group_collapse +
gestation_days +
pre_existing_risk_maternal +
complications_maternal,
data = train_key_vars,
family = Gamma(link = "log"))
predictions <- predict(final_model, newdata = test_key_vars, type="response")
test_key_vars <- test[,
c("group_collapse",
"gestation_days",
"pre_existing_risk_maternal",
"complications_maternal",
"drg_yield")]
predictions <- predict(final_model, newdata = test_key_vars, type="response")
# Calculate RMSE
rmse <- sqrt(mean((test_key_vars$drg_yield - predictions)^2))
rmse
# remove ninth variable
model_9 <- update(model_8, . ~ . - complications_maternal)
model_9_summary <- summary(model_9)
model_9_summary
model_coefficients <- as.data.frame(model_9_summary$coefficients)
model_coefficients$variable_name <- rownames(model_coefficients)
rownames(model_coefficients) <- NULL
max_p_value <- model_coefficients[model_coefficients$`Pr(>|t|)`==  max(model_coefficients$`Pr(>|t|)`), ]
install.packages("rempsyc")
library(effectsize)
summary(final_model)$coefficients
# Get the confidence interval (CI) of the regression coefficient
CI <- confint(final_model)
CI
summary(final_model)$coefficients$Estimate
summary_glm <- as.data.frame(summary(final_model)$coefficients)
View(summary_glm)
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(row.names(stats.table), summary_glm, confidence_intervals_glm)
output_glm_data_frame <- cbind(row.names(summary_glm), summary_glm, confidence_intervals_glm)
View(output_glm_data_frame)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], log)
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(Term = row.names(summary_glm), summary_glm, confidence_intervals_glm)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], exp)
View(output_glm_data_frame)
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(Term = row.names(summary_glm), summary_glm, confidence_intervals_glm)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], function(x) exp(x)-1)
View(output_glm_data_frame)
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(Term = row.names(summary_glm), summary_glm, confidence_intervals_glm)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], function(x) (exp(x)-1)*100)
View(output_glm_data_frame)
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(Term = row.names(summary_glm), summary_glm, confidence_intervals_glm)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], function(x) {(exp(x)-1)*100})
View(output_glm_data_frame)
my_function <- function(x) (exp(x) - 1) * 100
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], my_function)
View(output_glm_data_frame)
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(Term = row.names(summary_glm), summary_glm, confidence_intervals_glm)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
my_function <- function(x) (exp(x) - 1) * 100
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], my_function)
View(output_glm_data_frame)
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(Term = row.names(summary_glm), summary_glm, confidence_intervals_glm)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], function(x) {(exp(x)-1)*100})
View(output_glm_data_frame)
names(stats.table) <- c("Term", "Estimate", "SE", "t", "p", "CI_lower", "CI_upper")
names(output_glm_data_frame) <- c("Term", "Estimate", "SE", "t", "p", "CI_lower", "CI_upper")
View(output_glm_data_frame)
rownames(output_glm_data_frame) <- NULL
library(rempsyc)
nice_table(stats.table)
nice_table(output_glm_data_frame)
View(output_glm_data_frame)
summary(final_model)$coefficients
exp(11.17)
# Get the confidence interval (CI) of the regression coefficient
CI <- confint(final_model)
CI
output_glm_data_frame <- output_glm_data_frame[-1, ]
View(output_glm_data_frame)
terms <- c("Intercept", "Group assignment", "Gestation days", "Maternal risk profile", "Maternal complications")
summary_glm <- as.data.frame(summary(final_model)$coefficients)
confidence_intervals_glm <- confint(final_model)
output_glm_data_frame <- cbind(Term = terms, summary_glm, confidence_intervals_glm)
vars <- c("Estimate", "Std. Error", "2.5 %", "97.5 %")
output_glm_data_frame[vars] <- lapply(output_glm_data_frame[vars], function(x) {(exp(x)-1)*100})
names(output_glm_data_frame) <- c("Term", "Estimate", "SE", "t", "p", "CI_lower", "CI_upper")
rownames(output_glm_data_frame) <- NULL
output_glm_data_frame <- output_glm_data_frame[-1, ]
View(output_glm_data_frame)
nice_table(output_glm_data_frame)
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- bayesian
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
## ---- run-key-scripts
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- bayesian
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
source("R/08_evaluate_bayesian.R")
train_key_vars <- train[,
c("drg_yield",
"group_collapse",
"age_delivery",
"gestation_days",
"time_birth",
"first_birth",
"multiple_birth",
"missed_due_date",
"complications_delivery",
"complications_maternal",
"complications_fetal",
"pre_existing_risk_fetal",
"pre_existing_risk_maternal")]
n <- nrow(train_key_vars)
bayesian_variable_select <- lm(drg_yield ~ ., data=train_key_vars)
bayesian_variable_final <- step(bayesian_variable_select, k=log(n))
before_costs <- raw_data_phase_one[raw_data_phase_one$year == 2018, "drg_yield_total"]
after_costs <- raw_data_phase_one[raw_data_phase_one$year == 2020, "drg_yield_total"]
before_costs_repeated_samples <- replicate(1000, sample(before_costs, 30, replace = TRUE))
after_costs_repeated_samples <- replicate(1000, sample(after_costs, 30, replace = TRUE))
before_costs_repeated_means <- colMeans(before_costs_repeated_samples)
after_costs_repeated_means <- colMeans(after_costs_repeated_samples)
differences_repeated <- after_costs_repeated_means - before_costs_repeated_means
mean_difference_repeated <- round(mean(differences_repeated), 2)
sd_differences_repeated <- round(sd(differences_repeated), 2)
prior <- prior("normal(-229.01, 245.81)", class = "b", coef = "group_collapse1")
prior <- brms::prior("normal(-229.01, 245.81)", class = "b", coef = "group_collapse1")
bayesian_model <- brm(drg_yield ~ group_collapse +
pre_existing_risk_maternal +
gestation_days,
data = train_key_vars,
prior = prior)
summary(bayesian_model)
summary(bayesian_model)$coefficients
test <- summary(bayesian_model)
test$formula
test$fixed
# create a data-frame with glm output
terms <- c("Intercept",
"Group assignment",
"Gestation days",
"Maternal risk profile")
summary_bayes <- as.data.frame(summary(bayesian_model)$fixed)
output_bayes_data_frame <- cbind(Term = terms,
summary_bayes)
rownames(output_bayes_data_frame) <- NULL
output_bayes_data_frame <- output_bayes_data_frame[-1, ]
# back transform glm output
names(output_bayes_data_frame) <- c("Term",
"Estimate",
"SE",
"CI_lower",
"CI_upper",
"Rhat",
"Bulk effective sample size",
"Tail effective sample size")
nice_table(output_bayes_data_frame)
