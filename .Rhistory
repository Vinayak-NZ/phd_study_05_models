annotate("text", x = 400, y = 0.0005, label = "Some text") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
expression(paste("Sampled values, ", mu, "=5, ", sigma,
"=1"))
expression(mu)
paste(expression(mu), "test")
ggplot(distribution_compare, aes(x = values, fill = distribution)) +
geom_area(aes(y = ..density..), stat = "bin", alpha = 0.6) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Bayesian model representation",
subtitle = "Posterior and prior distributions",
caption = "Data source: Obstetric Digital Health Intervention",
fill = "Distribution") +
xlab("Estimate of intervention effect") +
ylab("Density") +
annotate("text", x = 0, y = 0.003, label = "\u03b8|X ~ N(-422.60, 199.75)") +
annotate("text", x = 400, y = 0.0005, label = "\u03b8 ~ N(-229.01, 245.81)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(distribution_compare, aes(x = values, fill = distribution)) +
geom_area(aes(y = ..density..), stat = "bin", alpha = 0.6) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Bayesian model representation",
subtitle = "Posterior and prior distributions",
caption = "Data source: Obstetric Digital Health Intervention",
fill = "Distribution") +
xlab("Estimate of intervention effect") +
ylab("Density") +
annotate("text", x = 50, y = 0.003, label = "\u03b8|X ~ N(-422.60, 199.75)") +
annotate("text", x = 450, y = 0.0005, label = "\u03b8 ~ N(-229.01, 245.81)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(distribution_compare, aes(x = values, fill = distribution)) +
geom_area(aes(y = ..density..), stat = "bin", alpha = 0.6) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Bayesian model representation",
subtitle = "Posterior and prior distributions",
caption = "Data source: Obstetric Digital Health Intervention",
fill = "Distribution") +
xlab("Estimate of intervention effect") +
ylab("Density") +
annotate("text", x = 50, y = 0.003, label = "\u03b8|\u1D732 ~ \u1D728(-422.60, 199.75)") +
annotate("text", x = 450, y = 0.0005, label = "\u03b8 ~ \u1D728(-229.01, 245.81)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(distribution_compare, aes(x = values, fill = distribution)) +
geom_area(aes(y = ..density..), stat = "bin", alpha = 0.6) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Bayesian model representation",
subtitle = "Posterior and prior distributions",
caption = "Data source: Obstetric Digital Health Intervention",
fill = "Distribution") +
xlab("Estimate of intervention effect") +
ylab("Density") +
annotate("text", x = 50, y = 0.003, label = "\u03b8|\u1d723 ~ \u1D728(-422.60, 199.75)") +
annotate("text", x = 450, y = 0.0005, label = "\u03b8 ~ \u1D728(-229.01, 245.81)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
ggplot(distribution_compare, aes(x = values, fill = distribution)) +
geom_area(aes(y = ..density..), stat = "bin", alpha = 0.6) +
scale_fill_manual(values = c("#46e7fd", "#e18b22")) +
labs(title = "Bayesian model representation",
subtitle = "Posterior and prior distributions",
caption = "Data source: Obstetric Digital Health Intervention",
fill = "Distribution") +
xlab("Estimate of intervention effect") +
ylab("Density") +
annotate("text", x = 50, y = 0.003, label = "\u03b8|X ~ X(-422.60, 199.75)") +
annotate("text", x = 450, y = 0.0005, label = "\u03b8 ~ X(-229.01, 245.81)") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color = "#2F2E41", size = 12, face = "bold"),
plot.subtitle = element_text(color = "#454543"),
plot.caption = element_text(color = "#454543", face = "italic"))
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
library(rpart)
library(rpart.plot)
?rpart
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- random-forest
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
library(rpart)
library(rpart.plot)
tree <- rpart(drg_yield ~ ., data = train)
rpart.plot(tree, main = "Decision Tree for the Iris Dataset")
?rpart.plot
rpart.plot(tree,
main = "Decision Tree for Iris Species Classification",  # Title
sub = "Using the Iris Dataset",                          # Subtitle
extra = 101,                                             # Position source reference
branch = 1,                                              # Italicize the source reference
shadow.col = "gray",                                     # Shadow color
shadow.size = 0.5,                                       # Shadow size
fallen.leaves = TRUE,                                    # Display fallen leaves
under = TRUE)
rpart.plot(tree,
main = "Decision Tree for Iris Species Classification",  # Title
sub = "Using the Iris Dataset")                          # Subtit)
rpart.plot(tree,
main = "Decision Tree for Iris Species Classification",  # Title
sub = "Using the Iris Dataset",
spacing = 0)                          # Subtit)
my_palette <- c("#46e7fd", "#e18b22", "#2F2E41")
rpart.plot(tree,
main = "Decision Tree for Iris Species Classification",  # Title
sub = "Using the Iris Dataset",
col = my_palette)                          # Subtit)
my_palette <- c("#46e7fd", "#e18b22")
rpart.plot(tree,
main = "Decision Tree for Iris Species Classification",  # Title
sub = "Using the Iris Dataset",
col = my_palette)                          # Subtit)
sub_01 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "complications_maternal")]
tree <- rpart(drg_yield ~ ., data = sub_01)
rpart.plot(tree, main = "Decision Tree for the Iris Dataset")
class_test <- rpart.plot(tree,
main = "")
class(class_test)
typeof(class_test)
test_list <- list()
test_list$tree <- rpart(drg_yield ~ ., data = sub_01)
par(mfrow = c(2,2))
rpart.plot(test_list$tree, type=5, extra=2)
rpart.plot(test_list$tree, type=5)
colnames(train)
sub_01 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_maternal")]
sub_01$Group.Assignment <- as.factor(ifelse(sub_01$group_collapse == 0, "Control", "Intervention"))
sub_01$Delivery.Complications <- as.factor(ifelse(sub_01$complications_delivery == 0, "No", "Yes"))
sub_01$Risks.Maternal <- as.factor(ifelse(sub_01$pre_existing_risk_maternal == 0, "No", "Yes"))
sub_01 <- sub_01[, c("drg_yield", "Group.Assignment", "Delivery.Complications", "Risks.Maternal")]
test_list <- list()
test_list$tree <- rpart(drg_yield ~ ., data = sub_01)
par(mfrow = c(2,2))
rpart.plot(test_list$tree, type=5)
table(train$time_birth)
table(train$age_delivery)
sub_02 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_fetal")]
sub_02$Group.Assignment <- as.factor(ifelse(sub_02$group_collapse == 0, "Control", "Intervention"))
sub_02$Delivery.Complications <- as.factor(ifelse(sub_02$complications_delivery == 0, "No", "Yes"))
sub_02$Risks.Fetal <- as.factor(ifelse(sub_02$pre_existing_risk_fetal == 0, "No", "Yes"))
sub_02 <- sub_02[, c("drg_yield", "Group.Assignment", "Delivery.Complications", "Risks.Fetal")]
test_list <- list()
test_list$tree <- rpart(drg_yield ~ ., data = sub_01)
par(mfrow = c(2,2))
rpart.plot(test_list$tree, type=5)
test_list$tree <- rpart(drg_yield ~ ., data = sub_02)
par(mfrow = c(2,2))
rpart.plot(test_list$tree, type=5)
sub_03$Group.Assignment <- as.factor(ifelse(sub_03$group_collapse == 0, "Control", "Intervention"))
sub_03 <- train[, c("drg_yield", "group_collapse", "age_delivery", "time_birth")]
sub_03$Group.Assignment <- as.factor(ifelse(sub_03$group_collapse == 0, "Control", "Intervention"))
sub_03$Age.of.mother <- sub_03$age_delivery
sub_03$Time.of.birth <- as.factor(ifelse(sub_03$time_birth == 0, "Core hours", "After hours"))
sub_03 <- sub_02[, c("drg_yield", "Group.Assignment", "Age.of.mother", "Time.of.birth")]
colnames(sub_03)
sub_03 <- sub_03[, c("drg_yield", "Group.Assignment", "Age.of.mother", "Time.of.birth")]
test_list <- list()
test_list$tree <- rpart(drg_yield ~ ., data = sub_03)
par(mfrow = c(2,2))
rpart.plot(test_list$tree, type=5)
# Plot the decision tree with rpart.plot and extract plot data
plot_data <- rpart.plot(test_list$tree, type = 5)
# Plot the decision tree with rpart.plot and extract plot data
plot_data <- rpart.plot(test_list$tree, type = 5)
# Convert the plot data to a ggplot object
ggplot_tree <- ggplot() +
geom_segment(data = plot_data$segments, aes(x = x, xend = xend, y = y, yend = yend)) +
geom_text(data = plot_data$node_labels, aes(x = x, y = y, label = label)) +
theme_void() +
theme(legend.position = "none")
ggplot_tree
print(ggplot_tree)
install.packages("ggplotify")
# Plot the decision tree with rpart.plot and extract plot data
plot_data <- rpart.plot(test_list$tree, type = 5)
library(ggplotify)
as.ggplot(plot_data)
plot_data$obj
as.ggplot(plot_data$obj)
# Convert the plot data to a ggplot object
ggplot_tree <- ggplot() +
geom_segment(data = plot_data$segments, aes(x = x, xend = xend, y = y, yend = yend)) +
geom_text(data = plot_data$node_labels, aes(x = x, y = y, label = label)) +
theme_void() +
theme(legend.position = "none")
print(ggplot_tree)
# Convert the plot data to a ggplot object
ggplot_tree <- ggplot() +
geom_segment(data = plot_data$segments, aes(x = x, xend = xend, y = y, yend = yend))
print(ggplot_tree)
sub_04 <- train[, c("drg_yield", "group_collapse", "gestation_age", "pre_existing_risk_maternal")]
sub_04 <- train[, c("drg_yield", "group_collapse", "gestation_days", "pre_existing_risk_maternal")]
sub_04$Group.Assignment <- as.factor(ifelse(sub_04$group_collapse == 0, "Control", "Intervention"))
sub_04$Gestation.Time <- sub_04$gestation_days
sub_04$Risks.Maternal <- as.factor(ifelse(sub_04$pre_existing_risk_maternal == 0, "No", "Yes"))
sub_04 <- sub_04[, c("drg_yield", "Group.Assignment", "Gestation.Time", "Risks.Maternal")]
test_list <- list()
test_list$tree <- rpart(drg_yield ~ ., data = sub_04)
par(mfrow = c(2,2))
rpart.plot(test_list$tree, type=5)
# Plot the decision tree with rpart.plot and extract plot data
plot_data <- rpart.plot(test_list$tree, type = 4)
# Convert the plot data to a ggplot object
ggplot_tree <- ggplot() +
geom_segment(data = plot_data$segments, aes(x = x, xend = xend, y = y, yend = yend)) +
geom_text(data = plot_data$node_labels, aes(x = x, y = y, label = label)) +
theme_void() +
theme(legend.position = "none")
print(ggplot_tree)
# Extract plot data
plot_data <- as.data.frame(attr(fit, "split"))
fit <- rpart(drg_yield ~ ., data = sub_04)
# Extract plot data
plot_data <- as.data.frame(attr(fit, "split"))
# Create ggplot object
ggplot_tree <- ggplot(plot_data, aes(x = var, y = yval)) +
geom_segment(aes(xend = var, yend = yval2), color = "blue") +
geom_text(aes(label = lab), hjust = 1, vjust = 1, color = "black", size = 3) +
labs(title = "Decision Tree for Iris Species Classification",
subtitle = "Using the Iris Dataset") +
theme_minimal()
print(ggplot_tree)
# Fit a decision tree model
fit <- rpart(Species ~ ., data = iris)
# Plot the decision tree with rpart.plot
rpart.plot(fit, type = 4, extra = 101, branch = 1)
# Extract plot data
plot_data <- as.data.frame(attr(fit, "split"))
# Create ggplot object
ggplot_tree <- ggplot(plot_data, aes(x = var, y = yval)) +
geom_segment(aes(xend = var, yend = yval2), color = "blue") +
geom_text(aes(label = lab), hjust = 1, vjust = 1, color = "black", size = 3) +
labs(title = "Decision Tree for Iris Species Classification",
subtitle = "Using the Iris Dataset") +
theme_minimal()
print(ggplot_tree)
sub_01 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_maternal")]
sub_01$Group.Assignment <- as.factor(ifelse(sub_01$group_collapse == 0, "Control", "Intervention"))
sub_01$Delivery.Complications <- as.factor(ifelse(sub_01$complications_delivery == 0, "No", "Yes"))
sub_01$Risks.Maternal <- as.factor(ifelse(sub_01$pre_existing_risk_maternal == 0, "No", "Yes"))
sub_01 <- sub_01[, c("drg_yield", "Group.Assignment", "Delivery.Complications", "Risks.Maternal")]
sub_02 <- train[, c("drg_yield", "group_collapse", "complications_delivery", "pre_existing_risk_fetal")]
sub_02$Group.Assignment <- as.factor(ifelse(sub_02$group_collapse == 0, "Control", "Intervention"))
sub_02$Delivery.Complications <- as.factor(ifelse(sub_02$complications_delivery == 0, "No", "Yes"))
sub_02$Risks.Fetal <- as.factor(ifelse(sub_02$pre_existing_risk_fetal == 0, "No", "Yes"))
sub_02 <- sub_02[, c("drg_yield", "Group.Assignment", "Delivery.Complications", "Risks.Fetal")]
sub_03 <- train[, c("drg_yield", "group_collapse", "age_delivery", "time_birth")]
sub_03$Group.Assignment <- as.factor(ifelse(sub_03$group_collapse == 0, "Control", "Intervention"))
sub_03$Age.of.mother <- sub_03$age_delivery
sub_03$Time.of.birth <- as.factor(ifelse(sub_03$time_birth == 0, "Core hours", "After hours"))
sub_03 <- sub_03[, c("drg_yield", "Group.Assignment", "Age.of.mother", "Time.of.birth")]
sub_04 <- train[, c("drg_yield", "group_collapse", "gestation_days", "pre_existing_risk_maternal")]
sub_04$Group.Assignment <- as.factor(ifelse(sub_04$group_collapse == 0, "Control", "Intervention"))
sub_04$Gestation.Time <- sub_04$gestation_days
sub_04$Risks.Maternal <- as.factor(ifelse(sub_04$pre_existing_risk_maternal == 0, "No", "Yes"))
sub_04 <- sub_04[, c("drg_yield", "Group.Assignment", "Gestation.Time", "Risks.Maternal")]
tree_list <- list()
test_list$tree_01 <- rpart(drg_yield ~ ., data = sub_01)
test_list$tree_02 <- rpart(drg_yield ~ ., data = sub_02)
test_list$tree_03 <- rpart(drg_yield ~ ., data = sub_03)
test_list$tree_05 <- rpart(drg_yield ~ ., data = sub_04)
par(mfrow = c(2,2))
tree_list$tree_01$frame$var = sub("\\.", " ", tree_list$tree_01$frame$var)
rpart.plot(tree_list$tree_01, type=5)
tree_list <- list()
test_list$tree_01 <- rpart(drg_yield ~ ., data = sub_01)
test_list$tree_02 <- rpart(drg_yield ~ ., data = sub_02)
test_list$tree_03 <- rpart(drg_yield ~ ., data = sub_03)
test_list$tree_05 <- rpart(drg_yield ~ ., data = sub_04)
rpart.plot(tree_list$tree_01, type=5)
tree_list$tree_01
tree_list <- list()
test_list$tree_01 <- rpart(drg_yield ~ ., data = sub_01)
test_list$tree_02 <- rpart(drg_yield ~ ., data = sub_02)
test_list$tree_03 <- rpart(drg_yield ~ ., data = sub_03)
test_list$tree_05 <- rpart(drg_yield ~ ., data = sub_04)
View(test_list)
tree_list <- list()
test_list$tree_01 <- rpart(drg_yield ~ ., data = sub_01)
test_list$tree_02 <- rpart(drg_yield ~ ., data = sub_02)
test_list$tree_03 <- rpart(drg_yield ~ ., data = sub_03)
test_list$tree_05 <- rpart(drg_yield ~ ., data = sub_04)
par(mfrow = c(2,2))
tree_list$tree$frame$var = sub("\\.", " ", tree_list$tree$frame$var)
rpart.plot(tree_list$tree, type=5)
tree_list[["tree"]]
tree_list$tree
par(mfrow = c(2,2))
rpart.plot(tree_list$tree, type=5)
tree_01 <- rpart(drg_yield ~ ., data = sub_01)
par(mfrow = c(2,2))
rpart.plot(tree_01, type=5)
par(mfrow = c(2,2))
par(mfrow = c(2,2))
tree_01$frame$var = sub("\\.", " ", tree_01$frame$var)
rpart.plot(tree_01, type=5)
tree_01 <- rpart(drg_yield ~ ., data = sub_01)
par(mfrow = c(2,2))
rpart.plot(tree_01, type=5)
par(mfrow = c(2, 2))
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
tree_02 <- rpart(drg_yield ~ ., data = sub_02)
tree_03 <- rpart(drg_yield ~ ., data = sub_03)
tree_05 <- rpart(drg_yield ~ ., data = sub_04)
tree_04 <- rpart(drg_yield ~ ., data = sub_04)
par(mfrow = c(2, 2))
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
text(line2user(line=mean(par('mar')[c(2, 4)]), side=2),
line2user(line=2, side=3), 'First title', xpd=NA, cex=2, font=2)
text(0.5,0.5,"First title",cex=2,font=2)
par(mar=c(2.5,2.5,1,1))
layout(matrix(c(1,2,3,4,1,5,3,6),ncol=2),heights=c(1,3,1,3))
plot.new()
text(0.5,0.5,"First title",cex=2,font=2)
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mar=c(2.5,2.5,1,1))
layout(matrix(c(1,2,3,4,1,5,3,6),ncol=2),heights=c(1,3,1,3))
plot.new()
text(0.5,0.5,"First title",cex=2,font=2)
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
?text
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.5, 0.5, "First title", cex = 2, font = "arial")
text(0.5, 0.5, "First title", cex = 2, family = "arial")
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.5, 0.5, "First title", cex = 3, font = 2, family = "arial", col = "#2F2E41")
matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(2, 3, 3))
plot.new()
text(0.5, 0.5, "First title", cex = 3, font = 2, family = "arial", col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.5, 0.5, "First title", cex = 3, font = 2, family = "arial", col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.5, 0.5, "First title", cex = 1.5, font = 2, family = "arial", col = "#2F2E41")
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.5, 0.5, "First title", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
?text
par(mar = c(2.5, 2.5, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 3))
par(mar = c(2.5, 2.5, 1, 1))
2.5 + 2.5 + 2
2.5 + 2.5 + 1
par(mar = c(2.5, 2.5, 1))
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 3))
plot.new()
text(0, 0, "First title", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 3))
plot.new()
text(0, 0, "First title", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.5, 0.5, "First title", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.5, 0.5, "Random forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0, 0, "Random forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.2, 0.2, "Random forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mfrow = c(2, 2))
text(0.5,0.5,"First title",cex=2,font=2)
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mfrow = c(2, 2))
text(0.5,0.5,"First title",cex=2,font=2)
par(mfrow = c(2, 2))
plot.new()
text(0.5,0.5,"First title",cex=2,font=2)
par(mfrow = c(3, 2))
plot.new()
text(0.1, 0.1,"First title",cex=2,font=2)
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mfrow = c(3, 2))
plot.new()
text(0, 0,"First title",cex=2,font=2)
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mfrow = c(3, 2))
plot.new()
text(0.1, 0,"First title",cex=2,font=2)
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mfrow = c(3, 2))
plot.new()
text(0.2, 0.2, "Random forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mfrow = c(3, 2))
plot.new()
text(0.2, 0.2, "Random \n forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
par(mar = c(2.5, 2.5, 1, 1))
layout(matrix(c(1, 2, 3, 4, 1, 5, 3, 6), ncol=2), heights=c(1, 3, 1, 3))
plot.new()
text(0.2, 0.2, "Random forest representation", cex = 3, font = 2, col = "#2F2E41")
rpart.plot(tree_01, type=5)
plot.new()
rpart.plot(tree_02, type=5)
rpart.plot(tree_03, type=5)
rpart.plot(tree_04, type=5)
renv::snapshot()
