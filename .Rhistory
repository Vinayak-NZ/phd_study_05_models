complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# default parameters
xgb_params_default <- list(
objective = "reg:squarederror",
max_depth = 6,
eta = 0.3
)
xgb_model_default <- xgboost(data = as.matrix(train_key_vars[, -1]),
label = train_key_vars$drg_yield,
params = xgb_params_default,
nrounds = 100)
View(train_key_vars)
View(train)
# convert variables to numeric for modelling
data_complete_cases$group_collapse <-
as.factor(ifelse(data_complete_cases$group_collapse == "control", 0, 1))
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
## ---- data-subset
# subset to complete cases
raw_data_phase_two <- raw_data_phase_two[complete.cases(raw_data_phase_two),]
# subset to variables used to derive predictors
raw_data_phase_two_subset <- raw_data_phase_two[, c(key_var,
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
## ---- derive-predictor-variables
# derive indicators of complications
raw_data_phase_two_subset$complications_delivery <-
((rowSums(raw_data_phase_two_subset[, complications_delivery] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_maternal <-
((rowSums(raw_data_phase_two_subset[, complications_maternal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_fetal <-
((rowSums(raw_data_phase_two_subset[, complications_fetal] == 1, na.rm=T) > 0) * 1)
# derive indicators of risk
raw_data_phase_two_subset$pre_existing_risk_fetal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_fetal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$pre_existing_risk_maternal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_maternal] == 1, na.rm=T) > 0) * 1)
data_complete_cases <- raw_data_phase_two_subset
## ---- format-variables
data_complete_cases$group_collapse <- ifelse(data_complete_cases$group %in% c("KG", "KG-ET"),
0, 1)
data_complete_cases$group_collapse <- factor(data_complete_cases$group_collapse,
levels = c(0, 1),
labels = c("control", "intervention"))
data_complete_cases$complications_delivery <- factor(data_complete_cases$complications_delivery,
levels = c(0, 1),
labels = c("no-complications", "complications"))
data_complete_cases$complications_maternal <- factor(data_complete_cases$complications_maternal,
levels = c(0, 1),
labels = c("no-complications", "complications"))
data_complete_cases$complications_fetal <- factor(data_complete_cases$complications_fetal,
levels = c(0, 1),
labels = c("no-complications", "complications"))
# data_complete_cases$complications_drg <- factor(data_complete_cases$complications_drg,
#                                                   levels = c(0, 1),
#                                                   labels = c("no-complications", "complications"))
data_complete_cases$pre_existing_risk_fetal <- factor(data_complete_cases$pre_existing_risk_fetal,
levels = c(0, 1),
labels = c("low", "high"))
data_complete_cases$pre_existing_risk_maternal <- factor(data_complete_cases$pre_existing_risk_maternal,
levels = c(0, 1),
labels = c("low", "high"))
data_complete_cases$complications_delivery <-
as.factor(data_complete_cases$complications_delivery)
data_complete_cases$complications_maternal <-
as.factor(data_complete_cases$complications_maternal)
data_complete_cases$complications_fetal <-
as.factor(data_complete_cases$complications_fetal)
# data_complete_cases$complications_drg <-
#   as.factor(data_complete_cases$complications_drg)
data_complete_cases$pre_existing_risk_fetal <-
as.factor(data_complete_cases$pre_existing_risk_fetal)
data_complete_cases$pre_existing_risk_maternal <-
as.factor(data_complete_cases$pre_existing_risk_maternal)
data_complete_cases$first_birth <- factor(data_complete_cases$first_birth,
levels = c(0, 1),
labels = c("no", "yes"))
data_complete_cases$time_birth <- factor(data_complete_cases$time_birth,
levels = c(0, 1),
labels = c("core-hours", "after-hours"))
data_complete_cases$multiple_birth <- factor(data_complete_cases$multiple_birth,
levels = c(0, 1),
labels = c("no", "yes"))
data_complete_cases$missed_due_date <- factor(data_complete_cases$missed_due_date,
levels = c(0, 1),
labels = c("no", "yes"))
attach(data_complete_cases)
data_complete_cases <- data_complete_cases[order(id), ]
detach(data_complete_cases)
data_complete_cases <- data_complete_cases[, c(key_var,
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# convert variables to numeric for modelling
data_complete_cases$group_collapse <-
as.factor(ifelse(data_complete_cases$group_collapse == "control", 0, 1))
View(data_complete_cases)
# subset to complete cases
raw_data_phase_two <- raw_data_phase_two[complete.cases(raw_data_phase_two),]
# subset to variables used to derive predictors
raw_data_phase_two_subset <- raw_data_phase_two[, c(key_var,
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# derive indicators of complications
raw_data_phase_two_subset$complications_delivery <-
((rowSums(raw_data_phase_two_subset[, complications_delivery] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_maternal <-
((rowSums(raw_data_phase_two_subset[, complications_maternal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_fetal <-
((rowSums(raw_data_phase_two_subset[, complications_fetal] == 1, na.rm=T) > 0) * 1)
# derive indicators of risk
raw_data_phase_two_subset$pre_existing_risk_fetal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_fetal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$pre_existing_risk_maternal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_maternal] == 1, na.rm=T) > 0) * 1)
data_complete_cases <- raw_data_phase_two_subset
data_complete_cases$group_collapse <- ifelse(data_complete_cases$group %in% c("KG", "KG-ET"),
0, 1)
## ---- data-subset
# subset to complete cases
raw_data_phase_two <- raw_data_phase_two[complete.cases(raw_data_phase_two),]
# subset to variables used to derive predictors
raw_data_phase_two_subset <- raw_data_phase_two[, c(key_var,
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
## ---- derive-predictor-variables
# derive indicators of complications
raw_data_phase_two_subset$complications_delivery <-
((rowSums(raw_data_phase_two_subset[, complications_delivery] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_maternal <-
((rowSums(raw_data_phase_two_subset[, complications_maternal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_fetal <-
((rowSums(raw_data_phase_two_subset[, complications_fetal] == 1, na.rm=T) > 0) * 1)
# derive indicators of risk
raw_data_phase_two_subset$pre_existing_risk_fetal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_fetal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$pre_existing_risk_maternal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_maternal] == 1, na.rm=T) > 0) * 1)
data_complete_cases <- raw_data_phase_two_subset
## ---- format-variables
data_complete_cases$group_collapse <- ifelse(data_complete_cases$group %in% c("KG", "KG-ET"),
0, 1)
data_complete_cases$group_collapse <- factor(data_complete_cases$group_collapse,
levels = c(0, 1),
labels = c("control", "intervention"))
data_complete_cases$complications_delivery <- factor(data_complete_cases$complications_delivery,
levels = c(0, 1),
labels = c("no-complications", "complications"))
data_complete_cases$complications_maternal <- factor(data_complete_cases$complications_maternal,
levels = c(0, 1),
labels = c("no-complications", "complications"))
data_complete_cases$complications_fetal <- factor(data_complete_cases$complications_fetal,
levels = c(0, 1),
labels = c("no-complications", "complications"))
# data_complete_cases$complications_drg <- factor(data_complete_cases$complications_drg,
#                                                   levels = c(0, 1),
#                                                   labels = c("no-complications", "complications"))
data_complete_cases$pre_existing_risk_fetal <- factor(data_complete_cases$pre_existing_risk_fetal,
levels = c(0, 1),
labels = c("low", "high"))
data_complete_cases$pre_existing_risk_maternal <- factor(data_complete_cases$pre_existing_risk_maternal,
levels = c(0, 1),
labels = c("low", "high"))
data_complete_cases$complications_delivery <-
as.factor(data_complete_cases$complications_delivery)
data_complete_cases$complications_maternal <-
as.factor(data_complete_cases$complications_maternal)
data_complete_cases$complications_fetal <-
as.factor(data_complete_cases$complications_fetal)
# data_complete_cases$complications_drg <-
#   as.factor(data_complete_cases$complications_drg)
data_complete_cases$pre_existing_risk_fetal <-
as.factor(data_complete_cases$pre_existing_risk_fetal)
data_complete_cases$pre_existing_risk_maternal <-
as.factor(data_complete_cases$pre_existing_risk_maternal)
data_complete_cases$first_birth <- factor(data_complete_cases$first_birth,
levels = c(0, 1),
labels = c("no", "yes"))
data_complete_cases$time_birth <- factor(data_complete_cases$time_birth,
levels = c(0, 1),
labels = c("core-hours", "after-hours"))
data_complete_cases$multiple_birth <- factor(data_complete_cases$multiple_birth,
levels = c(0, 1),
labels = c("no", "yes"))
data_complete_cases$missed_due_date <- factor(data_complete_cases$missed_due_date,
levels = c(0, 1),
labels = c("no", "yes"))
attach(data_complete_cases)
data_complete_cases <- data_complete_cases[order(id), ]
detach(data_complete_cases)
data_complete_cases <- data_complete_cases[, c(key_var,
"group_collapse",
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# convert variables to numeric for modelling
data_complete_cases$group_collapse <-
as.factor(ifelse(data_complete_cases$group_collapse == "control", 0, 1))
data_complete_cases$time_birth <-
as.factor(ifelse(data_complete_cases$time_birth == "core-hours", 0, 1))
data_complete_cases$first_birth <-
as.factor(ifelse(data_complete_cases$first_birth == "no", 0, 1))
data_complete_cases$multiple_birth <-
as.factor(ifelse(data_complete_cases$multiple_birth == "no", 0, 1))
data_complete_cases$missed_due_date <-
as.factor(ifelse(data_complete_cases$missed_due_date == "no", 0, 1))
data_complete_cases$complications_delivery <-
as.factor(ifelse(data_complete_cases$complications_delivery == "no-complications", 0, 1))
View(data_complete_cases)
# use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE),
nrow(data_complete_cases),
replace=TRUE,
prob=c(0.8, 0.2))
train  <- data_complete_cases[sample, ]
test   <- data_complete_cases[!sample, ]
train_key_vars <- train[,
c("drg_yield",
"group_collapse",
"age_delivery",
"gestation_days",
"time_birth",
"first_birth",
"multiple_birth",
"missed_due_date",
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# default parameters
xgb_params_default <- list(
objective = "reg:squarederror",
max_depth = 6,
eta = 0.3
)
xgb_model_default <- xgboost(data = as.matrix(train_key_vars[, -1]),
label = train_key_vars$drg_yield,
params = xgb_params_default,
nrounds = 100)
View(train_key_vars)
as.matrix(train_key_vars[, -1]
)
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
## ---- data-subset
# subset to complete cases
raw_data_phase_two <- raw_data_phase_two[complete.cases(raw_data_phase_two),]
# subset to variables used to derive predictors
raw_data_phase_two_subset <- raw_data_phase_two[, c(key_var,
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
## ---- derive-predictor-variables
# derive indicators of complications
raw_data_phase_two_subset$complications_delivery <-
((rowSums(raw_data_phase_two_subset[, complications_delivery] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_maternal <-
((rowSums(raw_data_phase_two_subset[, complications_maternal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$complications_fetal <-
((rowSums(raw_data_phase_two_subset[, complications_fetal] == 1, na.rm=T) > 0) * 1)
# derive indicators of risk
raw_data_phase_two_subset$pre_existing_risk_fetal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_fetal] == 1, na.rm=T) > 0) * 1)
raw_data_phase_two_subset$pre_existing_risk_maternal <-
((rowSums(raw_data_phase_two_subset[, pre_existing_risk_maternal] == 1, na.rm=T) > 0) * 1)
data_complete_cases <- raw_data_phase_two_subset
## ---- format-variables
data_complete_cases$group_collapse <- ifelse(data_complete_cases$group %in% c("KG", "KG-ET"),
0, 1)
attach(data_complete_cases)
data_complete_cases <- data_complete_cases[order(id), ]
detach(data_complete_cases)
data_complete_cases <- data_complete_cases[, c(key_var,
"group_collapse",
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE),
nrow(data_complete_cases),
replace=TRUE,
prob=c(0.8, 0.2))
train  <- data_complete_cases[sample, ]
test   <- data_complete_cases[!sample, ]
train_key_vars <- train[,
c("drg_yield",
"group_collapse",
"age_delivery",
"gestation_days",
"time_birth",
"first_birth",
"multiple_birth",
"missed_due_date",
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# default parameters
xgb_params_default <- list(
objective = "reg:squarederror",
max_depth = 6,
eta = 0.3
)
xgb_model_default <- xgboost(data = as.matrix(train_key_vars[, -1]),
label = train_key_vars$drg_yield,
params = xgb_params_default,
nrounds = 100)
test_key_vars <- test[,
c("drg_yield",
"group_collapse",
"age_delivery",
"gestation_days",
"time_birth",
"first_birth",
"multiple_birth",
"missed_due_date",
complications_delivery,
complications_maternal,
complications_fetal,
pre_existing_risk_fetal,
pre_existing_risk_maternal)]
# make predictions to test set
predictions <- predict(xgb_model, as.matrix(test_key_vars[, -1]))
xgb_model <- xgboost(data = as.matrix(train_key_vars[, -1]),
label = train_key_vars$drg_yield,
params = xgb_params_default,
nrounds = 100)
# make predictions to test set
predictions <- predict(xgb_model, as.matrix(test_key_vars[, -1]))
# Evaluate the model (e.g., RMSE)
rmse <- sqrt(mean((test_key_vars$drg_yield - predictions)^2))
rmse
xgb_params_tuned <- list(
objective = "reg:squarederror",
max_depth = 6,
eta = 0.1,
gamma = 0.2,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.6
)
xgb_model <- xgboost(data = as.matrix(train_key_vars[, -1]),
label = train_key_vars[, 1],
nrounds = 300,
params = xgb_params_tuned)
# make predictions to test set
predictions <- predict(xgb_model, as.matrix(test_key_vars[, -1]))
# Evaluate the model (e.g., RMSE)
rmse <- sqrt(mean((test_key_vars$drg_yield - predictions)^2))
rmse
predictions
test_key_vars$drg_yield
(test_key_vars$drg_yield - predictions)
# make this example reproducible
set.seed(5)
# use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE),
nrow(data_complete_cases),
replace=TRUE,
prob=c(0.8, 0.2))
sample
# make this example reproducible
set.seed(5)
# use 70% of dataset as training set and 30% as test set
sample <- sample(c(TRUE, FALSE),
nrow(data_complete_cases),
replace=TRUE,
prob=c(0.8, 0.2))
sample
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- convert-vars
source("R/05_convert_numeric.R")
## ---- split-data-set
source("R/06_split_data.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- glm
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/06_build_glm.R")
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- glm
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_glm.R")
source("R/08_evaluate_glm.R")
model_9_summary
# final_model
final_model <- lm(drg_yield ~ group_collapse +
gestation_days +
pre_existing_risk_maternal,
data = train_key_vars)
final_model_summary <- summary(final_model_summary)
final_model_summary <- summary(final_model)
final_model_summary
source("R/07_build_glm.R")
source("R/08_evaluate_glm.R")
rmse
## ---- bayesian
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
train_key_vars <- train[,
c("group_collapse",
"age_delivery",
"gestation_days",
"time_birth",
"first_birth",
"multiple_birth",
"missed_due_date",
"complications_delivery",
"complications_maternal",
"complications_fetal",
"pre_existing_risk_fetal",
"pre_existing_risk_maternal",
"drg_yield")]
n <- nrow(train_key_vars)
bayesian_variable_select <- lm(drg_yield ~ ., data=train_key_vars)
View(train_key_vars)
View(train_key_vars)
table(train_key_vars$group_collapse)
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- glm
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/06_vars_factor_convert.R")
source("R/07_build_bayesian.R")
source("R/07_build_bayesian.R")
source("R/08_evaluate_bayesian.R")
source("R/08_evaluate_bayesian.R")
rmse
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- random-forest
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/07_build_random_forest.R")
source("R/07_build_random_forest.R")
source("R/07_build_random_forest.R")
source("R/08_evaluate_random_forest.R")
source("R/08_evaluate_random_forest.R")
rmse
source("R/00_load_functions.R")
source("R/00_load_package.R")
source("R/01_load_data.R")
source("R/02_create_variable.R")
source("R/03_create_variable_groupings.R")
source("R/04_data_edit.R")
## ---- xgboost
source("R/05_convert_numeric.R")
source("R/06_split_data.R")
source("R/07_build_xgboost.R")
source("R/07_build_xgboost.R")
source("R/08_evaluate_xgboost.R")
rmse
renv::snapshot()
